/////////////////////////////////////////////////////////////////////////////////////////////
// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의
// 아래 표준 입출력 예제 필요시 참고하세요.
// 표준 입력 예제
// int a;
// float b, c;
// double d, e, f;
// char g;
// char var[256];
// long long AB;
// cin >> a;                            // int 변수 1개 입력받는 예제
// cin >> b >> c;                       // float 변수 2개 입력받는 예제 
// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제
// cin >> g;                            // char 변수 1개 입력받는 예제
// cin >> var;                          // 문자열 1개 입력받는 예제
// cin >> AB;                           // long long 변수 1개 입력받는 예제
/////////////////////////////////////////////////////////////////////////////////////////////
// 표준 출력 예제
// int a = 0;                            
// float b = 1.0, c = 2.0;               
// double d = 3.0, e = 0.0; f = 1.0;
// char g = 'b';
// char var[256] = "ABCDEFG";
// long long AB = 12345678901234567L;
// cout << a;                           // int 변수 1개 출력하는 예제
// cout << b << " " << c;               // float 변수 2개 출력하는 예제
// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제
// cout << g;                           // char 변수 1개 출력하는 예제
// cout << var;                         // 문자열 1개 출력하는 예제
// cout << AB;                          // long long 변수 1개 출력하는 예제
/////////////////////////////////////////////////////////////////////////////////////////////

#include<iostream>
#include<algorithm>
#include<math.h>

using namespace std;

int N, M, C;
int map[11][11];
bool visited[11][11];

int res = 0;
int cres = 0;

void cbf(int x, int y, int range, int sum, int count, int sop) {
	if (sum > C) return;

	if (cres < sop) {
		cres = sop;
	}

	int i = x;

	for (int j = y; j < range; j++) {
		if (j < N) {
			cbf(i, j + 1, range, sum + map[i][j], count + 1, sop + pow(map[i][j], 2));
		}
	}
}

int calc(int x, int y, int range) {

	cbf(x, y, range, 0, 0, 0);

	return cres;
}

void bf(int x, int y, int sum, int count) {
	cres = 0;
	if (count == 2) {
		if (sum > res) {
			res = sum;
		}
		return;
	}

	for (int i = x; i < N; i++) {
		for (int j = x == i ? y : 0; j < N; j++) {
			bool flag = false;
			for (int k = j; k < j + M; k++) {
				if (visited[i][k]) flag = true;
			}

			if (flag) {
				continue;
			}

			for (int k = j; k < j + M; k++) {
				visited[i][k] = true;
			}

			bf(i, j + M, sum + calc(i, j, j + M), count + 1);

			for (int k = j; k < j + M; k++) {
				visited[i][k] = false;
			}


		}
	}

}

int main(int argc, char** argv)
{
	int test_case;
	int T;
	/*
	   아래의 freopen 함수는 input.txt 를 read only 형식으로 연 후,
	   앞으로 표준 입력(키보드) 대신 input.txt 파일로부터 읽어오겠다는 의미의 코드입니다.
	   //여러분이 작성한 코드를 테스트 할 때, 편의를 위해서 input.txt에 입력을 저장한 후,
	   freopen 함수를 이용하면 이후 cin 을 수행할 때 표준 입력 대신 파일로부터 입력을 받아올 수 있습니다.
	   따라서 테스트를 수행할 때에는 아래 주석을 지우고 이 함수를 사용하셔도 좋습니다.
	   freopen 함수를 사용하기 위해서는 #include <cstdio>, 혹은 #include <stdio.h> 가 필요합니다.
	   단, 채점을 위해 코드를 제출하실 때에는 반드시 freopen 함수를 지우거나 주석 처리 하셔야 합니다.
	*/
	//freopen("input.txt", "r", stdin);
	cin >> T;
	/*
	   여러 개의 테스트 케이스가 주어지므로, 각각을 처리합니다.
	*/
	for (test_case = 1; test_case <= T; ++test_case)
	{

		/////////////////////////////////////////////////////////////////////////////////////////////


		cin >> N >> M >> C;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				cin >> map[i][j];
			}
		}

		bf(0, 0, 0, 0);

		cout << "#" << test_case << " " << res << '\n';
		res = 0;

		/////////////////////////////////////////////////////////////////////////////////////////////


	}
	return 0;//정상종료시 반드시 0을 리턴해야합니다.
}

// 완전 탐색을 위한 재귀 함수 2개 사용하여 구현(벌꿀 채취 위치 선택, 선택된 채취 위치 중 채취 가능한 최대값 계산).
// 구현하며 작은 오류들 많아 디버깅에 시간 오래 걸림. 재귀 함수 2개는 너무 복잡해서 흐름 파악 어려우므로 되도록 피하면서 구현할 수 있는 방법 찾아볼 것(다른 사람 코드보니 BF하나로 선택할 위치 정한 뒤, for문 돌며 DFS 함수에 i(M개 중에 선택할 값의 index)를 인자로 넘겨 구현).
